# Copyright(C) 2024-2025 Advanced Micro Devices, Inc. All rights reserved.
# SPDX-License-Identifier: MIT

name: "Test GAIA UI"
description: Launch GAIA UI and make sure it launches agents and LLMs
inputs:
  username:
    required: true
  huggingface_access_token:
    required: true
  install_from_source:
    required: true
  gaia_mode:
    required: true
  install_dir:
    required: true
    description: "Directory where GAIA is installed"
runs:
  using: "composite"
  steps:
    - name: Ensure GAIA can open properly
      shell: PowerShell
      env:
        HUGGINGFACE_ACCESS_TOKEN: "${{ inputs.huggingface_access_token }}"
        HF_TOKEN: "${{ inputs.huggingface_access_token }}"
        GAIA_MODE: "${{ inputs.gaia_mode }}"
      run: |
          $cwd = (Get-Item .\).FullName
          $Env:LEMONADE_CACHE_DIR="$cwd\lemon-cache"
          $Env:HF_HOME="$cwd\hf-cache"

          $installFromSource = [System.Convert]::ToBoolean("${{ inputs.install_from_source }}")

          if ( $installFromSource ) {
            # Optional Step 0: Get the gaia executable
            Write-Host "Step 1: Activate and verify Conda environment"
            $env:Path = "$env:USERPROFILE\Miniconda3;$env:USERPROFILE\Miniconda3\Scripts;$env:Path"
            & "$env:USERPROFILE\Miniconda3\shell\condabin\conda-hook.ps1"
            conda activate gaiaenv
            Write-Host "Verify Python environment"
            python -c "import sys; print(sys.executable)"
            Write-Host "Find gaia executable location"
            $gaiaPath = Get-Command gaia -ErrorAction SilentlyContinue
            if (-not $gaiaPath) {
              Write-Host "Error: Cannot find gaia executable in PATH"
              Write-Host "Current PATH: $env:Path"
              exit 1
            }
            Write-Host "Found gaia at: $($gaiaPath.Source)"
          } else {
            # Initialize conda for non-source installation
            Write-Host "Initializing conda..."
            $env:Path = "$env:USERPROFILE\Miniconda3;$env:USERPROFILE\Miniconda3\Scripts;$env:Path"
            & "$env:USERPROFILE\Miniconda3\shell\condabin\conda-hook.ps1"

            # Debug logging for install_dir
            Write-Host "`n=== Install Directory Debug Info ==="
            Write-Host "Raw install_dir input: ${{ inputs.install_dir }}"
            Write-Host "Install directory exists: $(Test-Path '${{ inputs.install_dir }}')"
            if (Test-Path '${{ inputs.install_dir }}') {
              Write-Host "Directory contents:"
              Get-ChildItem '${{ inputs.install_dir }}' | ForEach-Object { Write-Host $_.Name }
            }

            # Verify conda environment exists
            $condaEnvPath = "${{ inputs.install_dir }}\gaia_env"
            Write-Host "`nConda environment path: $condaEnvPath"
            Write-Host "Conda environment exists: $(Test-Path $condaEnvPath)"
            if (Test-Path $condaEnvPath) {
              Write-Host "Found conda environment at: $condaEnvPath"
              Write-Host "Python version:"
              conda run -p $condaEnvPath python --version
            } else {
              Write-Host "Error: Conda environment not found at: $condaEnvPath"
              exit 1
            }
          }

          # Step 1: Ensure that nothing is running on ports 8000 and 8001
          Write-Host "Checking ports..."
          $portCheck = Test-NetConnection -ComputerName 127.0.0.1 -Port 8001
          if ($portCheck.TcpTestSucceeded) {
            Write-Host "Error: Port 8001 (agent) is already in use!"
            exit 1
          } else {
            Write-Host "Port 8001 (agent) is free."
          }
          $portCheck = Test-NetConnection -ComputerName 127.0.0.1 -Port 8000
          if ($portCheck.TcpTestSucceeded) {
            Write-Host "Error: Port 8000 (llm server) is already in use!"
            exit 1
          } else {
            Write-Host "Port 8000 (llm server) is free."
          }

          # Step 2: Start GAIA in the background with log capture
          $env:QT_QPA_PLATFORM = "offscreen"
          Write-Host "Environment variable QT_QPA_PLATFORM set to offscreen"
          $env:PATH = "$env:PATH;C:\Users\${{ inputs.username }}\AppData\Local\Programs\Ollama"

          # Create log file paths with absolute paths
          $logPath = Join-Path $PWD "gaia.log"
          $errorLogPath = Join-Path $PWD "gaia_error.log"

          Write-Host "Starting GAIA..."

          # Add debug info for troubleshooting
          Write-Host "`n===== DEBUG INFORMATION ====="
          Write-Host "Current working directory: $cwd"
          Write-Host "GAIA_MODE: $env:GAIA_MODE"
          Write-Host "User: ${{ inputs.username }}"
          Write-Host "Install directory: ${{ inputs.install_dir }}"
          Write-Host "Install from source: $installFromSource"

          # Check installation directory
          $installPath = "${{ inputs.install_dir }}"
          if (Test-Path $installPath) {
            Write-Host "`nInstallation directory exists at: $installPath"
            Write-Host "`nDirectory contents:"
            Get-ChildItem $installPath -Recurse | Select-Object -First 10 | ForEach-Object {
              Write-Host "$($_.FullName)"
            }

            # Check for gaia_env in the installation directory
            $condaEnvPath = "$installPath/gaia_env"
            if (Test-Path $condaEnvPath) {
              Write-Host "`nConda environment exists at: $condaEnvPath"
              Write-Host "`nConda environment contents:"
              Get-ChildItem $condaEnvPath | Select-Object -First 10 | ForEach-Object {
                Write-Host "$($_.Name)"
              }

              # Check Python version and packages
              Write-Host "`nPython version:"
              conda run -p $condaEnvPath python --version
              Write-Host "`nInstalled packages:"
              conda run -p $condaEnvPath pip list
            } else {
              Write-Host "`nERROR: Conda environment not found at: $condaEnvPath"
              Write-Host "Checking for gaia_env in other common locations..."
              $commonPaths = @(
                "$env:USERPROFILE\AppData\Local\GAIA\gaia_env",
                "$env:PROGRAMFILES\GAIA\gaia_env",
                "$env:PROGRAMFILES(X86)\GAIA\gaia_env",
                "C:\Users\${{ inputs.username }}\AppData\Local\GAIA\gaia_env"
              )
              foreach ($path in $commonPaths) {
                if (Test-Path $path) {
                  Write-Host "Found conda environment at: $path"
                  $condaEnvPath = $path
                  break
                }
              }
            }

            # Check for settings files
            $settingsPath = "$condaEnvPath/Lib/site-packages/gaia/interface"
            if (Test-Path $settingsPath) {
              Write-Host "`nSettings directory exists at: $settingsPath"
              Write-Host "`nSettings files:"
              Get-ChildItem $settingsPath -Filter "*.json" | ForEach-Object {
                Write-Host "$($_.Name)"
              }
            } else {
              Write-Host "`nERROR: Settings directory not found at: $settingsPath"
            }
          } else {
            Write-Host "`nERROR: Installation directory not found at: $installPath"
            Write-Host "Checking for GAIA installation in common locations..."
            $commonPaths = @(
              "$env:USERPROFILE\AppData\Local\GAIA",
              "$env:PROGRAMFILES\GAIA",
              "$env:PROGRAMFILES(X86)\GAIA"
            )
            foreach ($path in $commonPaths) {
              if (Test-Path $path) {
                Write-Host "Found GAIA installation at: $path"
                $installPath = $path
                break
              }
            }
          }

          # Environment variables
          Write-Host "`nEnvironment variables:"
          Write-Host "PATH: $env:PATH"
          Write-Host "PYTHONPATH: $env:PYTHONPATH"
          Write-Host "QT_QPA_PLATFORM: $env:QT_QPA_PLATFORM"
          Write-Host "LEMONADE_CACHE_DIR: $Env:LEMONADE_CACHE_DIR"
          Write-Host "HF_HOME: $Env:HF_HOME"
          Write-Host "===== END DEBUG INFO ====="

          if ( $installFromSource ) {
            $gaiaProcess = Start-Process -NoNewWindow -FilePath "gaia" -RedirectStandardOutput $logPath -RedirectStandardError $errorLogPath -PassThru
          } else {
            Write-Host "Starting GAIA using conda run..."
            $condaEnvPath = "${{ inputs.install_dir }}\gaia_env"
            if (-not (Test-Path $condaEnvPath)) {
              Write-Host "Error: Conda environment not found at: $condaEnvPath"
              exit 1
            }
            $gaiaProcess = Start-Process -NoNewWindow -FilePath "conda" -ArgumentList "run -p $condaEnvPath gaia" -RedirectStandardOutput $logPath -RedirectStandardError $errorLogPath -PassThru
          }
          Write-Host "Started GAIA with PID: $($gaiaProcess.Id)"

          # Start log monitoring
          $logJob = Start-Job -ScriptBlock {
            param($logPath)
            Get-Content $logPath -Wait | ForEach-Object {
              Write-Host $_
            }
          } -ArgumentList $logPath

          $errorLogJob = Start-Job -ScriptBlock {
            param($errorLogPath)
            Get-Content $errorLogPath -Wait | ForEach-Object {
              Write-Host $_ -ForegroundColor Red
            }
          } -ArgumentList $errorLogPath

          # Step 3: Check if GAIA servers are running with timeout
          Write-Host "Waiting for the Agent and LLM ports to come up..."
          $maxAttempts = 30  # 5 minutes total (10 seconds * 30)
          $attempt = 0
          $success = $false

          while (-not $success -and $attempt -lt $maxAttempts) {
            $attempt++
            Write-Host "Attempt $attempt of $maxAttempts..."

            $agentPortCheck = Test-NetConnection -ComputerName 127.0.0.1 -Port 8001
            $llmPortCheck = Test-NetConnection -ComputerName 127.0.0.1 -Port 8000

            if ($agentPortCheck.TcpTestSucceeded -and $llmPortCheck.TcpTestSucceeded) {
              Write-Host "Success! Both servers are running."
              $success = $true
            } else {
              if (-not $agentPortCheck.TcpTestSucceeded) {
                Write-Host "Agent server is not yet running on port 8001"
              }
              if (-not $llmPortCheck.TcpTestSucceeded) {
                Write-Host "LLM server is not yet running on port 8000"
              }
            }

            # Check if GAIA process is still running
            $gaiaRunning = Get-Process -Id $gaiaProcess.Id -ErrorAction SilentlyContinue
            if (-not $gaiaRunning) {
              Write-Host "Error: GAIA process exited unexpectedly!"
              Write-Host "=== Final GAIA Logs ==="
              if(Test-Path $logPath) { Get-Content $logPath }
              Write-Host "=== Final GAIA Error Logs ==="
              if(Test-Path $errorLogPath) { Get-Content $errorLogPath }
              exit 1
            }

            Start-Sleep -Seconds 10
          }

          if (-not $success) {
            Write-Host "Error: Servers failed to start within timeout period"
            Write-Host "=== Final GAIA Logs ==="
            if(Test-Path $logPath) { Get-Content $logPath }
            Write-Host "=== Final GAIA Error Logs ==="
            if(Test-Path $errorLogPath) { Get-Content $errorLogPath }
            exit 1
          }

          # Step 4: Stop everything
          Write-Host "Stopping GAIA and cleaning up..."
          Stop-Job -Job $logJob
          Stop-Job -Job $errorLogJob
          Remove-Job -Job $logJob
          Remove-Job -Job $errorLogJob
          taskkill /F /T /PID $gaiaProcess.Id
          Write-Host "GAIA process has been stopped."

          # Show final logs
          Write-Host "=== Final GAIA Logs ==="
          if(Test-Path $logPath) {
            Get-Content $logPath
            if (Select-String -Path $logPath -Pattern "ERROR" -CaseSensitive -Quiet) {
              Write-Error "Found ERROR messages in GAIA logs"
              $errorLines = Select-String -Path $logPath -Pattern "ERROR" -CaseSensitive
              Write-Error "Error lines found:`n$($errorLines | ForEach-Object { $_.Line })"
              exit 1
            }
          }
          Write-Host "=== Final GAIA Error Logs ==="
          if(Test-Path $errorLogPath) {
            Get-Content $errorLogPath
            if (Select-String -Path $errorLogPath -Pattern "error|Error:|ERROR:|CRITICAL:" -CaseSensitive -Quiet) {
              Write-Error "Found errors in GAIA error logs"
              $errorLines = Select-String -Path $errorLogPath -Pattern "Error:|ERROR:|CRITICAL:" -CaseSensitive
              Write-Error "Error log content:`n$($errorLines | ForEach-Object { $_.Line })"
              exit 1
            }
          }