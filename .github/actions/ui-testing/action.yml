# Copyright(C) 2024 Advanced Micro Devices, Inc. All rights reserved.
# SPDX-License-Identifier: MIT

name: "Test GAIA UI"
description: Launch GAIA UI and make sure it launches agents and LLMs
inputs:
  username:
    required: true
  huggingface_access_token:
    required: true
  install_from_source:
    required: true
runs:
  using: "composite"
  steps:
    - name: Ensure GAIA can open properly
      shell: PowerShell
      env:
        HUGGINGFACE_ACCESS_TOKEN: "${{ inputs.huggingface_access_token }}"
        HF_TOKEN: "${{ inputs.huggingface_access_token }}"
      run: |
          $cwd = (Get-Item .\).FullName
          $Env:LEMONADE_CACHE_DIR="$cwd\lemon-cache"
          $Env:HF_HOME="$cwd\hf-cache"
          
          $installFromSource = [System.Convert]::ToBoolean("${{ inputs.install_from_source }}")

          if ( $installFromSource ) {
            # Optional Step 0: Get the gaia executable
            Write-Host "Step 1: Activate and verify Conda environment"
            $env:Path = "$env:USERPROFILE\Miniconda3;$env:USERPROFILE\Miniconda3\Scripts;$env:Path"
            & "$env:USERPROFILE\Miniconda3\shell\condabin\conda-hook.ps1"
            conda activate gaiaenv
            Write-Host "Verify Python environment"
            python -c "import sys; print(sys.executable)"
            Write-Host "Find gaia executable location"
            $gaiaPath = Get-Command gaia -ErrorAction SilentlyContinue
            if (-not $gaiaPath) {
              Write-Host "Error: Cannot find gaia executable in PATH"
              Write-Host "Current PATH: $env:Path"
              exit 1
            }
            Write-Host "Found gaia at: $($gaiaPath.Source)"
          }
          
          # Step 1: Ensure that nothing is running on ports 8000 and 8001
          $portCheck = Test-NetConnection -ComputerName 127.0.0.1 -Port 8001
          if ($portCheck.TcpTestSucceeded) {
            Write-Host "Error: Port 8001 (agent) is already in use!"
            exit 1
          } else {
            Write-Host "Port 8001 (agent) is free."
          }
          $portCheck = Test-NetConnection -ComputerName 127.0.0.1 -Port 8000
          if ($portCheck.TcpTestSucceeded) {
            Write-Host "Error: Port 8000 (llm server) is already in use!"
            exit 1
          } else {
            Write-Host "Port 8000 (llm server) is free."
          }

          # Step 2: Start GAIA in the background with log capture
          $env:QT_QPA_PLATFORM = "offscreen"
          Write-Host "Environment variable QT_QPA_PLATFORM set to offscreen"
          $env:PATH = "$env:PATH;C:\Users\${{ inputs.username }}\AppData\Local\Programs\Ollama"

          # Create log file paths with absolute paths
          $logPath = Join-Path $PWD "gaia.log"
          $errorLogPath = Join-Path $PWD "gaia_error.log"

          if ( $installFromSource ) {
            $gaiaProcess = Start-Process -NoNewWindow -FilePath "gaia" -RedirectStandardOutput $logPath -RedirectStandardError $errorLogPath -PassThru
          } else {
            $gaiaProcess = Start-Process -FilePath "conda" -ArgumentList "run -p C:\Users\${{ inputs.username }}\AppData\Local\GAIA\gaia_env gaia" -RedirectStandardOutput $logPath -RedirectStandardError $errorLogPath -PassThru
          }
          Write-Host "Started GAIA..."

          # Start log monitoring in background jobs
          $logJob = Start-Job -ScriptBlock {
            param($logPath)
            Get-Content $logPath -Wait | ForEach-Object {
              Write-Host $_
            }
          } -ArgumentList $logPath

          $errorLogJob = Start-Job -ScriptBlock {
            param($errorLogPath)
            Get-Content $errorLogPath -Wait | ForEach-Object {
              Write-Host $_ -ForegroundColor Red
            }
          } -ArgumentList $errorLogPath

          # Step 3: Check if GAIA servers are running
          Write-Host "Wait for the Agent and LLM ports to come up"
          while ($true) {
            $agentPortCheck = Test-NetConnection -ComputerName 127.0.0.1 -Port 8001
            if (-not $agentPortCheck.TcpTestSucceeded) {
              Write-Host "Agent server is not yet running on port 8001!"
            } else {
              Write-Host "Agent server is running on port 8001."
            }
            
            $llmPortCheck = Test-NetConnection -ComputerName 127.0.0.1 -Port 8000
            if (-not $llmPortCheck.TcpTestSucceeded) {
              Write-Host "LLM server is not yet running on port 8000!"
            } else {
              Write-Host "LLM server is running on port 8000."
            }

            if ($agentPortCheck.TcpTestSucceeded -and $llmPortCheck.TcpTestSucceeded) {
                Write-Host "Both agentPortCheck and llmPortCheck are true. Breaking out of the loop."
                break
            }

            # Receive any pending output from the log jobs
            Receive-Job -Job $logJob -Keep
            Receive-Job -Job $errorLogJob -Keep

            Start-Sleep -Seconds 30
          }

          # Step 4: Check if GAIA is still running
          $gaiaRunning = Get-Process -Id $gaiaProcess.Id -ErrorAction SilentlyContinue
          if (-not $gaiaRunning) {
            Write-Host "Error: GAIA process exited unexpectedly!"
            exit 1
          } else {
            Write-Host "GAIA process is still alive."
          }

          # Step 5: Stop everything
          Stop-Job -Job $logJob
          Stop-Job -Job $errorLogJob
          Remove-Job -Job $logJob
          Remove-Job -Job $errorLogJob
          Stop-Process -Id $gaiaProcess.Id
          Write-Host "GAIA process has been stopped."

          # Show final logs
          Write-Host "=== Final GAIA Logs ==="
          if(Test-Path $logPath) { Get-Content $logPath }
          Write-Host "=== Final GAIA Error Logs ==="
          if(Test-Path $errorLogPath) { Get-Content $errorLogPath }