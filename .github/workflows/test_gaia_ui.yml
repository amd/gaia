# Copyright(C) 2024 Advanced Micro Devices, Inc. All rights reserved.

# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: GAIA UI Test

on:
  push:
    branches: ["main"]
    paths-ignore:
      - 'docs/**'
      - 'data/**'
      - 'notebooks/**'
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - 'docs/**'
      - 'data/**'
      - 'notebooks/**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  gaia-ui-test:
    runs-on: windows-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v3

      - name: Set up Miniconda with 64-bit Python
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          activate-environment: gaia
          python-version: "3.10"

      - name: Install dependencies
        shell: bash -el {0}
        run: |
          python -m pip install --upgrade pip
          conda install pylint
          pip install -e .[dev]
          python -m pip check

      - name: Install Ollama
        shell: cmd
        run: |
          curl -L https://ollama.com/download/OllamaSetup.exe -o OllamaSetup.exe --progress-bar
          echo Ollama download complete. Starting installation.
          start /wait OllamaSetup.exe /VERYSILENT /SUPPRESSMSGBOXES /SP- /LOG="llama_install.log"
          echo "Ollama installation log:"
          type llama_install.log
          echo "PATH=C:\Users\runneradmin\AppData\Local\Programs\Ollama;%PATH%" >> $GITHUB_ENV
          del OllamaSetup.exe

      - name: Verify Ollama Installation
        shell: cmd
        run: |
          if exist "C:\Users\runneradmin\AppData\Local\Programs\Ollama\ollama.exe" (
              echo "Ollama installed successfully."
          ) else (
              echo "Ollama installation failed. Executable not found."
              exit 1
          )
          set PATH=%PATH%;C:\Users\runneradmin\AppData\Local\Programs\Ollama
          ollama --version

      - name: Ensure GAIA can open properly
        shell: pwsh
        env:
          HUGGINGFACE_ACCESS_TOKEN: ${{ secrets.HUGGINGFACE_ACCESS_TOKEN }}
          HF_TOKEN: ${{ secrets.HUGGINGFACE_ACCESS_TOKEN }}
        run: |
          # Step 1: Ensure that nothing is running on ports 8000 and 8001
          $portCheck = Test-NetConnection -ComputerName 127.0.0.1 -Port 8001
          if ($portCheck.TcpTestSucceeded) {
            Write-Host "Error: Port 8001 (agent) is already in use!"
            exit 1
          } else {
            Write-Host "Port 8001 (agent) is free."
          }
          $portCheck = Test-NetConnection -ComputerName 127.0.0.1 -Port 8000
          if ($portCheck.TcpTestSucceeded) {
            Write-Host "Error: Port 8000 (llm server) is already in use!"
            exit 1
          } else {
            Write-Host "Port 8000 (llm server) is free."
          }

          # Step 2: Start GAIA in the background
          $env:QT_QPA_PLATFORM = "offscreen"
          Write-Host "Environment variable QT_QPA_PLATFORM set to offscreen"
          $gaiaOutput = "gaia_output.log"
          $gaiaErrorOutput = "gaia_error.log"
          $env:PATH = "$env:PATH;C:\Users\runneradmin\AppData\Local\Programs\Ollama"
          $gaiaProcess = Start-Process -NoNewWindow -FilePath "gaia" -RedirectStandardOutput $gaiaOutput -RedirectStandardError $gaiaErrorOutput -PassThru
          Write-Host "Started GAIA..."

          # Step 3: Wait for 180 seconds for GAIA to initialize
          Start-Sleep -Seconds 180
          Write-Host "Waited for 180 seconds."
          Write-Host "GAIA Output:"
          Get-Content $gaiaOutput
          Get-Content $gaiaErrorOutput

          # Step 4: Check if GAIA is still running
          $gaiaRunning = Get-Process -Id $gaiaProcess.Id -ErrorAction SilentlyContinue
          if (-not $gaiaRunning) {
            Write-Host "Error: GAIA process exited unexpectedly!"
            exit 1
          } else {
            Write-Host "GAIA process is still alive."
          }

          # Step 5: Check if GAIA servers are running
          $portCheck = Test-NetConnection -ComputerName 127.0.0.1 -Port 8001
          if (-not $portCheck.TcpTestSucceeded) {
            Write-Host "Error: Agent server is not running on port 8001!"
            exit 1
          } else {
            Write-Host "Agent server is running on port 8001."
          }
          $portCheck = Test-NetConnection -ComputerName 127.0.0.1 -Port 8000
          if (-not $portCheck.TcpTestSucceeded) {
            Write-Host "Error: LLM server is running on port 8000!"
            exit 1
          } else {
            Write-Host "LLM server is running on port 8000."
          }

          # Step 6: Stop the GAIA process
          Stop-Process -Id $gaiaProcess.Id
          Write-Host "GAIA process has been stopped."
