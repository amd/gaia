# Copyright(C) 2024-2025 Advanced Micro Devices, Inc. All rights reserved.
# SPDX-License-Identifier: MIT

name: GAIA Hybrid Local Tests 🌩️

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

env:
  GAIA_INSTALL_PATH: "C:\\Users\\nimbys\\AppData\\Local"
  GAIA_FULL_PATH: "C:\\Users\\nimbys\\AppData\\Local\\GAIA"

jobs:
  build-installer:
    uses: ./.github/workflows/build_installer.yml

  gaia-hybrid-local-tests:
    runs-on: stx-240
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false || contains(github.event.pull_request.labels.*.name, 'ready_for_ci')
    needs: build-installer
    steps:
      - uses: actions/checkout@v4

      - name: Remove existing GAIA installation
        shell: powershell
        run: |
          $installPath = "${{ env.GAIA_FULL_PATH }}"
          if (Test-Path $installPath) {
            Write-Host "Removing existing GAIA installation from: $installPath"
            Remove-Item -Path $installPath -Recurse -Force
            Write-Host "Existing installation removed successfully"
          } else {
            Write-Host "No existing GAIA installation found at: $installPath"
          }

      - name: Log build information
        shell: powershell
        run: |
          Write-Host "Building tests for installer version: ${{ needs.build-installer.outputs.VERSION }}"
          Write-Host "Built from commit: ${{ needs.build-installer.outputs.COMMIT_HASH }}"
          Write-Host "Expected installer hash: ${{ needs.build-installer.outputs.INSTALLER_HASH }}"

      - name: Download GAIA Installer
        uses: actions/download-artifact@v4
        with:
          name: gaia-windows-installer-${{ needs.build-installer.outputs.VERSION }}-${{ needs.build-installer.outputs.COMMIT_HASH }}
          path: installer

      - name: Verify installer hash
        shell: powershell
        run: |
          $expectedHash = "${{ needs.build-installer.outputs.INSTALLER_HASH }}"
          $filePath = "installer\gaia-windows-setup.exe"
          $actualHash = (Get-FileHash -Path $filePath -Algorithm SHA256).Hash

          Write-Host "Expected hash: $expectedHash"
          Write-Host "Actual hash: $actualHash"
          Write-Host "Commit hash: ${{ needs.build-installer.outputs.COMMIT_HASH }}"

          if ($expectedHash -ne $actualHash) {
            Write-Host "Error: Hash mismatch! The downloaded installer does not match the built installer."
            Write-Host "This indicates that the wrong installer was downloaded or the installer was modified."
            exit 1
          } else {
            Write-Host "Hash verification successful: The downloaded installer matches the built installer."
          }

      - name: Pre-installation check
        run: |
          cd installer
          Write-Host "=== Pre-Installation Check ==="
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Workspace path: ${{ github.workspace }}"
          Write-Host "Installer exists: $(Test-Path gaia-windows-setup.exe)"
          Write-Host "Installer size: $((Get-Item gaia-windows-setup.exe).Length) bytes"


          # Check for processes using ports 8000 and 8001
          Write-Host "`n=== Checking Ports ==="
          $ports = @(8000, 8001)
          foreach ($port in $ports) {
            $process = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue
            if ($process) {
              Write-Host "Port $port is in use by process ID: $($process.OwningProcess)"
            } else {
              Write-Host "Port $port is free"
            }
          }

      - name: Test installer with Hybrid mode
        run: |
          cd installer
          Write-Host "Running installer with Hybrid mode..."
          .\RunInstaller.ps1 -MODE HYBRID -INSTALL_PATH "${{ env.GAIA_INSTALL_PATH }}"
          if ($LASTEXITCODE -ne 0) {
            throw "Installer failed with exit code $LASTEXITCODE"
          }

      - name: Ensure GAIA can open properly
        timeout-minutes: 15
        env:
          HUGGINGFACE_ACCESS_TOKEN: ${{ secrets.HUGGINGFACE_ACCESS_TOKEN }}
        uses: ./.github/actions/ui-testing
        with:
          huggingface_access_token: ${{ secrets.HUGGINGFACE_ACCESS_TOKEN }}
          install_from_source: "false"
          gaia_mode: HYBRID
          username: nimbys
          install_dir: "${{ env.GAIA_FULL_PATH }}"

      - name: Check for processes using ports 8000 and 8001
        shell: PowerShell
        run: |
          Write-Host "Waiting 10 seconds before checking ports..."
          Start-Sleep -Seconds 10

          $portsInUse = @()
          $ports = @(8000, 8001)
          foreach ($port in $ports) {
              $process = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue
              if ($process) {
                  $processId = $process.OwningProcess
                  $processName = (Get-Process -Id $processId).ProcessName
                  Write-Host "Port $port is in use by process $processName (ID: $processId)"
                  $portsInUse += $port
              } else {
                  Write-Host "Port $port is free"
              }
          }

          if ($portsInUse.Count -gt 0) {
              $portList = $portsInUse -join ", "
              throw "Error: Ports $portList are still in use. Please ensure all GAIA processes are properly terminated."
          }

      - name: Run unit tests
        timeout-minutes: 15
        env:
          HUGGINGFACE_ACCESS_TOKEN: ${{ secrets.HUGGINGFACE_ACCESS_TOKEN }}
          HF_TOKEN: ${{ secrets.HUGGINGFACE_ACCESS_TOKEN }}
          GAIA_MODE: HYBRID
        shell: PowerShell
        run: |
          $ErrorActionPreference = "Continue"  # Don't stop on non-fatal errors
          $cwd = (Get-Item .\).FullName
          $Env:LEMONADE_CACHE_DIR="$cwd\lemon-cache"
          $Env:HF_HOME="$cwd\hf-cache"
          $env:GAIA_MODE = "HYBRID"
          $installDir = "${{ env.GAIA_FULL_PATH }}"

          Write-Host "`n=== Test Environment Debug Info ==="
          Write-Host "Current working directory: $cwd"
          Write-Host "Install directory: $installDir"
          Write-Host "Conda environment path: $installDir\gaia_env"
          Write-Host "GAIA_MODE: $env:GAIA_MODE"
          Write-Host "LEMONADE_CACHE_DIR: $Env:LEMONADE_CACHE_DIR"
          Write-Host "HF_HOME: $Env:HF_HOME"

          # Verify conda environment
          if (Test-Path "$installDir\gaia_env") {
            Write-Host "`nConda environment exists"
            Write-Host "Python version:"
            conda run -p "$installDir\gaia_env" python --version
            Write-Host "`nInstalled packages:"
            conda run -p "$installDir\gaia_env" pip list
          } else {
            Write-Host "`nERROR: Conda environment not found at $installDir\gaia_env"
          }

          # Install dev dependencies
          Write-Host "`nInstalling dev dependencies..."
          conda run -p "$installDir\gaia_env" pip install .[dev]

          Write-Host "`n=== Starting Tests ==="

          Write-Host "Running test_lemonade_client.py"
          $result = conda run -p "$installDir\gaia_env" python tests\test_lemonade_client.py 2>&1 | Out-String -Stream

          # Format and display the output
          Write-Host "`n=== Test Output ==="
          $result | ForEach-Object { Write-Host $_ }
          Write-Host "`n=== End Test Output ==="

          if ($LASTEXITCODE -ne 0) {
              throw "test_lemonade_client.py failed with exit code $LASTEXITCODE"
          }

          Write-Host "Running test_gaia.py"
          $result = conda run -p "$installDir\gaia_env" python tests\test_gaia.py --hybrid --asyncio-mode=strict 2>&1 | Out-String -Stream

          # Format and display the output
          Write-Host "`n=== Test Output ==="
          $result | ForEach-Object { Write-Host $_ }
          Write-Host "`n=== End Test Output ==="

          if ($LASTEXITCODE -ne 0) {
              throw "test_gaia.py failed with exit code $LASTEXITCODE"
          }

          Write-Host "Running test_llama_index.py with hybrid backend"
          $result = conda run -p "$installDir\gaia_env" python tests\test_llama_index.py --hybrid 2>&1 | Out-String -Stream

          # Format and display the output
          Write-Host "`n=== Test Output ==="
          $result | ForEach-Object { Write-Host $_ }
          Write-Host "`n=== End Test Output ==="

          if ($LASTEXITCODE -ne 0) {
              throw "test_llama_index.py failed with exit code $LASTEXITCODE"
          }

      - name: Cleanup installation
        if: always()
        shell: powershell
        run: |
          $installPath = "${{ env.GAIA_FULL_PATH }}"
          if (Test-Path $installPath) {
            Write-Host "Cleaning up installation from: $installPath"
            Remove-Item -Path $installPath -Recurse -Force
            Write-Host "Cleanup completed successfully"
          } else {
            Write-Host "No installation found at: $installPath"
          }